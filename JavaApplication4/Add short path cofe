package graphutils;

import java.util.*;

/**
 * This class represents a graph data structure and provides methods to find the shortest path between two nodes.
 */
public class Graph {
    private int V; // number of vertices
    private List<List<Integer>> adj; // adjacency list

    /**
     * Constructor to initialize the graph with the given number of vertices.
     *
     * @param v The number of vertices in the graph.
     */
    public Graph(int v) {
        V = v;
        adj = new ArrayList<>(v);
        for (int i = 0; i < v; i++) {
            adj.add(new ArrayList<>());
        }
    }

    /**
     * Adds an edge between two vertices in the graph.
     *
     * @param u The source vertex.
     * @param v The destination vertex.
     */
    public void addEdge(int u, int v) {
        adj.get(u).add(v);
        adj.get(v).add(u);
    }

    /**
     * Finds the shortest path between two nodes in the graph using Breadth First Search (BFS) algorithm.
     *
     * @param start The starting node.
     * @param end   The ending node.
     * @return Returns the shortest path between the start and end nodes as a list of vertices.
     */
    public List<Integer> findShortestPath(int start, int end) {
        // Create a visited array to keep track of visited vertices
        boolean[] visited = new boolean[V];
        // Create a queue for BFS
        Queue<Integer> queue = new LinkedList<>();
        // Create an array to store the parent of each vertex
        int[] parent = new int[V];

        // Mark the start node as visited and enqueue it
        visited[start] = true;
        queue.add(start);
        parent[start] = -1;

        // BFS traversal
        while (!queue.isEmpty()) {
            int current = queue.poll();

            // If the current node is the end node, we have found the shortest path
            if (current == end) {
                break;
            }

            // Explore all adjacent vertices of the current node
            for (int neighbor : adj.get(current)) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                    parent[neighbor] = current;
                }
            }
        }

        // If the end node is not reachable from the start node, return an empty list
        if (!visited[end]) {
            return new ArrayList<>();
        }

        // Reconstruct the shortest path from the parent array
        List<Integer> shortestPath = new ArrayList<>();
        int current = end;
        while (current != -1) {
            shortestPath.add(current);
            current = parent[current];
        }
        Collections.reverse(shortestPath);

        return shortestPath;
    }
}

// Usage Example for Graph

public class GraphExample {

    public static void main(String[] args) {
        // Create a graph with 6 vertices
        Graph graph = new Graph(6);

        // Add edges between vertices
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(2, 3);
        graph.addEdge(2, 4);
        graph.addEdge(3, 4);
        graph.addEdge(3, 5);
        graph.addEdge(4, 5);

        // Find the shortest path between vertex 0 and vertex 5
        List<Integer> shortestPath = graph.findShortestPath(0, 5);

        // Print the shortest path
        System.out.println("Shortest path from vertex 0 to vertex 5: " + shortestPath);
    }
}
